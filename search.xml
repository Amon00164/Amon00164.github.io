<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>tauri 学习</title>
      <link href="/2025/09/01/tauri-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/09/01/tauri-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Tuari-项目结构"><a href="#Tuari-项目结构" class="headerlink" title="Tuari 项目结构"></a>Tuari 项目结构</h1><p><strong>JavaScript 项目位于顶层 src，Rust 项目位于 src-tauri 目录下。</strong></p><h2 id="src-tauri-内部机构"><a href="#src-tauri-内部机构" class="headerlink" title="src-tauri 内部机构"></a>src-tauri 内部机构</h2><ul><li><p>tauri.conf.json: Tauri 主配置文件，包含从应用程序标识符到开发服务器 URL 的所有内容。该文件是 Tauri CLI 用于查找 Rust 项目的标记。<br>— 标记文件</p></li><li><p>capabilities&#x2F;: Tauri 读取能力的默认文件夹（给权限，给能力，在此处允许命令才能被调用）<br>— 程序运行所需的权限</p></li><li><p>icons&#x2F;: tauri icon 命令的默认输出目录，通常在 tarui.conf.json &gt; bundle &gt; icon 中引用，并用于应用程序的图标。<br>— 应用程序图标</p></li><li><p>build.rs: 包含 tauri_bind::build()，用于 Tauri 的构建系统。<br>— 用于 Tauri 构建系统</p></li><li><p>src&#x2F;lib.rs: 包含 Rust 代码和移动端入口点（标记为 #[cfg_attr(mobile, tauri::mobile_entry_point)] 的函数），我们不直接在 main.rs 中编写代码的原因是，在移动端构建中，我们会将您的应用程序编译成一个库，并通过平台框架加载它们。<br>— 移动端入口点，不直接在此文件中编写代码，因为构建移动端中，将应用程序编译成一个库</p></li><li><p>src&#x2F;main.rs: 是桌面应用程序的主要入口点，我们在 main 中运行 tauri_app_lib::run() 以使用与移动端相同的入口点，因此为简单起见请勿修改此文件，请修改 lib.rs。<br>— 桌面程序入口点</p></li></ul><h1 id="Tauri-工作方式"><a href="#Tauri-工作方式" class="headerlink" title="Tauri 工作方式"></a>Tauri 工作方式</h1><p>工作方式类似于静态 Web 主机，其构建方式是您首先将 JavaScript 项目编译为静态文件，然后编译 Rust 项目，该项目将这些静态文件捆绑一起，因此 JavaScript 项目的设置与构建静态网站基本相同。</p><p>只使用 Rust 代码，只需要删除所有其他内容，并将 src-tauri&#x2F; 文件夹用作顶层项目或 Rust 工作区的一个成员。</p><h1 id="Tauri-前端配置"><a href="#Tauri-前端配置" class="headerlink" title="Tauri 前端配置"></a>Tauri 前端配置</h1><h2 id="Leptos"><a href="#Leptos" class="headerlink" title="Leptos"></a>Leptos</h2><p>Leptos 是一个基于 Rust 的Web框架。指南截至 Leptos 0.6 版本都是准确的</p><h3 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h3><ul><li>使用 SSG, Tauri 不正式支持基于服务器的解决方案。</li><li>使用 serve.ws_protocol &#x3D; “ws”, 以便热重载 websocket 可以正确连接以进行移动开发。</li><li>启用 withGlobalTauri 以确保 Tauri API 在window.<strong>TAURI</strong> 变量中可用，并且可以使用 wasm-bindgen导入。</li></ul><h3 id="示例配置"><a href="#示例配置" class="headerlink" title="示例配置"></a>示例配置</h3><ul><li>更新 Tauri 配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">src-tauri/tauri.conf.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;build&quot;: &#123;</span><br><span class="line">        &quot;deforeDevCommand&quot;: &quot;trunk serve&quot;,</span><br><span class="line">        &quot;devUrl&quot;: &quot;https://:1420&quot;,</span><br><span class="line">        &quot;beforeBuildCommand&quot;: &quot;trunk build&quot;,</span><br><span class="line">        &quot;distDir&quot;: &quot;../dist&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">    &quot;app&quot;: &#123;</span><br><span class="line">        &quot;withGlobalTauri&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>更新 Trunk 配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Trunk.toml</span><br><span class="line">[build]</span><br><span class="line">target = &quot;./index.html&quot;</span><br><span class="line"></span><br><span class="line">[watch]</span><br><span class="line">ignore = [&quot;./src-tauri&quot;]</span><br><span class="line"></span><br><span class="line">[serve]</span><br><span class="line">port = 1420</span><br><span class="line">open = false</span><br><span class="line">ws_protocol = &quot;ws&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Next-js"><a href="#Next-js" class="headerlink" title="Next.js"></a>Next.js</h2><p>Next.js 是一个基于 React 的元框架。指南适用于 Next.js 14.2.3 版本</p><h3 id="清单-1"><a href="#清单-1" class="headerlink" title="清单"></a>清单</h3><ul><li>通过设置 output: ‘export’ 使用静态导出。 Tauri 不支持基于服务器的解决方案。</li><li>在 tauri.conf.json 中使用 out 目录作为 frontendDist。</li></ul><h3 id="示例配置-1"><a href="#示例配置-1" class="headerlink" title="示例配置"></a>示例配置</h3><ul><li>更新 Tauri 配置<br>(npm, yarn, pnpm, deno)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">src-tauri/tauri.conf.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;build&quot;: &#123;</span><br><span class="line">        &quot;beforeDevCommand&quot;: &quot;npm(yarn,pnpm) run dev&quot; || &quot;deno task dev&quot;,</span><br><span class="line">        &quot;beforeBuildCommand&quot;: &quot;npm(yarn,pnpm) run build&quot; || &quot;deno task build&quot;,</span><br><span class="line">        &quot;devUrl&quot;: &quot;https://:3000&quot;,</span><br><span class="line">        &quot;frontendDist&quot;: &quot;../out&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>更新 Next.js 配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">next.config.mjs</span><br><span class="line"></span><br><span class="line">const isProd = process.env.NODE_ENV === &#x27;production&#x27;;</span><br><span class="line"></span><br><span class="line">const internalHost = process.env.TAURI_DEV_HOST || &#x27;localhost&#x27;;</span><br><span class="line"></span><br><span class="line">/** @type &#123;import(&#x27;next&#x27;).NextConfig&#125; */</span><br><span class="line">const nextConfig = &#123;</span><br><span class="line">    // Ensure Next.js uses SSG instead of SSR</span><br><span class="line">    // https://nextjs.net.cn/docs/pages/building-your-application/deploying/static-exports</span><br><span class="line">    output: &#x27;export&#x27;,</span><br><span class="line">    // Note: This feature is required to use the Next.js Image component in SSG mode.</span><br><span class="line">    // See https://nextjs.net.cn/docs/messages/export-image-api for different workarounds.</span><br><span class="line">    images: &#123;</span><br><span class="line">        unoptimized: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    // Configure assetPrefix or else the server won&#x27;t properly resolve your assets.</span><br><span class="line">    assetPrefix: isProd ? undefined : `http://$&#123;internalHost&#125;:3000`,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default nextConfig;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>更新 package.json 配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;next dev&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;next build&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;next start&quot;,</span><br><span class="line">    &quot;lint&quot;: &quot;next lint&quot;,</span><br><span class="line">    &quot;tauri&quot;: &quot;tauri&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h2><p>Nuxt 是一个用于 Vue 的元框架。指南适用于 Nuxt 3.17。</p><h3 id="清单-2"><a href="#清单-2" class="headerlink" title="清单"></a>清单</h3><ul><li>通过设置 ssr: false 使用 SSG。 Tauri 不支持基于服务器的解决方案。</li><li>在 tauri.conf.json 中使用默认的 ..&#x2F;dist 作为 frontendDist。</li><li>使用 nuxi build 编译</li><li>在 nuxt.config.ts 中设置 telemetry: false 禁用遥测（可选）</li></ul><h3 id="示例配置-2"><a href="#示例配置-2" class="headerlink" title="示例配置"></a>示例配置</h3><ul><li>更新 Tauri 配置<br>(npm, yarn, pnpm, deno)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src-tauri/tauri.conf.json</span><br><span class="line">与 Next.js 相同的更新配置</span><br></pre></td></tr></table></figure><ul><li>更新 Nuxt 配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">export default defineNuxtConfig(&#123;</span><br><span class="line">  compatibilityDate: &#x27;2025-05-15&#x27;,</span><br><span class="line">  // (optional) Enable the Nuxt devtools</span><br><span class="line">  devtools: &#123; enabled: true &#125;,</span><br><span class="line">  // Enable SSG</span><br><span class="line">  ssr: false,</span><br><span class="line">  // Enables the development server to be discoverable by other devices when running on iOS physical devices</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: &#x27;0&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  vite: &#123;</span><br><span class="line">    // Better support for Tauri CLI output</span><br><span class="line">    clearScreen: false,</span><br><span class="line">    // Enable environment variables</span><br><span class="line">    // Additional environment variables can be found at</span><br><span class="line">    // https://v2.tauri.org.cn/reference/environment-variables/</span><br><span class="line">    envPrefix: [&#x27;VITE_&#x27;, &#x27;TAURI_&#x27;],</span><br><span class="line">    server: &#123;</span><br><span class="line">      // Tauri requires a consistent port</span><br><span class="line">      strictPort: true,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  // Avoids error [unhandledRejection] EMFILE: too many open files, watch</span><br><span class="line">  ignore: [&#x27;**/src-tauri/**&#x27;],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Qwik"><a href="#Qwik" class="headerlink" title="Qwik"></a>Qwik</h2><p>Qwik Web 框架是一个为构建高性能的 Web 应用程序而设计的前端 JavaScript框架。</p><h3 id="清单-3"><a href="#清单-3" class="headerlink" title="清单"></a>清单</h3><ul><li>使用 SSG。Tauri 不支持基于服务器的解决方案。</li><li>tauri.conf.json 中使用 dist&#x2F; 作为 frontendDist。</li></ul><h3 id="示例配置-3"><a href="#示例配置-3" class="headerlink" title="示例配置"></a>示例配置</h3><ul><li>创建新的 Qwik 应用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm || yarn || pnpm create qwik@latest</span><br><span class="line">(deno)deno run -A npm:create-qwik@latest</span><br><span class="line">cd &lt;PROJECT&gt;</span><br></pre></td></tr></table></figure><ul><li>安装 static adapter</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm || yarn || pnpm run qwik add static</span><br><span class="line">(deno)deno task qwik add static</span><br></pre></td></tr></table></figure><ul><li>将 Tauri CLI 添加到项目</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm || yarn || pnpm install -D @tauri-apps/cli@latest</span><br><span class="line">(deno)deno add -D npm:@tauri-apps/cli@latest</span><br></pre></td></tr></table></figure><ul><li>启动新的 Tauri 项目</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm || yarn || pnpm run tauri init</span><br><span class="line">(deno)deno task tauri init</span><br></pre></td></tr></table></figure><ul><li>Tauri 配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tauri.conf.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;build&quot;: &#123;</span><br><span class="line">    &quot;devUrl&quot;: &quot;https://:5173&quot;</span><br><span class="line">    &quot;frontendDist&quot;: &quot;../dist&quot;,</span><br><span class="line">    &quot;beforeDevCommand&quot;: &quot;npm || yarn || pnpm run dev || deno task dev&quot;,</span><br><span class="line">    &quot;beforeBuildCommand&quot;: &quot;npm || yarn || pnpm run build || deno task build&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动 tauri 项目</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm || yarn || pnpm run tauri dev || deno tasj tauri dev</span><br></pre></td></tr></table></figure><h2 id="Trunk"><a href="#Trunk" class="headerlink" title="Trunk"></a>Trunk</h2><h3 id="清单-4"><a href="#清单-4" class="headerlink" title="清单"></a>清单</h3><ul><li>使用 SSG，Tauri 不正式支持基于服务器的解决方案。</li><li>使用 serve.ws_protocol &#x3D; “ws” 以便热重载 websocket 可以正确连接进行移动开发。</li><li>启用 withGlobalTauri 以确保 Tauri API 在 window.<strong>TAURI</strong> 变量中可用，并且可以使用 wasm-bindgen 导入。</li></ul><h3 id="示例配置-4"><a href="#示例配置-4" class="headerlink" title="示例配置"></a>示例配置</h3><ul><li>更新 Tauri 配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tauri.conf.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;build&quot;: &#123;</span><br><span class="line">    &quot;beforeDevCommand&quot;: &quot;trunk serve&quot;,</span><br><span class="line">    &quot;beforeBuildCommand&quot;: &quot;trunk build&quot;,</span><br><span class="line">    &quot;devUrl&quot;: &quot;https://:8080&quot;,</span><br><span class="line">    &quot;frontendDist&quot;: &quot;../dist&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;app&quot;: &#123;</span><br><span class="line">    &quot;withGlobalTauri&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更新 Tauri 配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Trunk.toml</span><br><span class="line">[watch]</span><br><span class="line">ignore = [&quot;./src-tauri&quot;]</span><br><span class="line"></span><br><span class="line">[serve]</span><br><span class="line">ws_protocol = &quot;ws&quot;</span><br></pre></td></tr></table></figure><h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><p>Vite 是一款旨在为现代 Web 项目提供更快、更精简开发体验的构建工具。</p><h3 id="清单-5"><a href="#清单-5" class="headerlink" title="清单"></a>清单</h3><ul><li>在 src-tauri&#x2F;tauri.conf.json 中将 ..&#x2F;dist 用作 frontendDist。</li><li>当设置为在 iOS 物理设备上运行时，将 process.env.TAURI_DEV_HOST 用作开发服务器主机IP。</li></ul><h3 id="示例配置-5"><a href="#示例配置-5" class="headerlink" title="示例配置"></a>示例配置</h3><ul><li>更新 Tauri 配置<br>如果 package.json 中有以下 dev 和 build 脚本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;vite&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;tsc &amp;&amp; vite build&quot;,</span><br><span class="line">    &quot;preview&quot;: &quot;vite preview&quot;,</span><br><span class="line">    &quot;tauri&quot;: &quot;tauri&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">可以配置 Tauri CLI 使用 Vite 开发服务器和 dist 文件夹，并使用钩子自动运行 Vite 脚本</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;build&quot;: &#123;</span><br><span class="line">    &quot;beforeDevCommand&quot;: &quot;npm run dev&quot;,</span><br><span class="line">    &quot;beforeBuildCommand&quot;: &quot;npm run build&quot;,</span><br><span class="line">    &quot;devUrl&quot;: &quot;https://:5173&quot;,</span><br><span class="line">    &quot;frontendDist&quot;: &quot;../dist&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更新 Vite 配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;;</span><br><span class="line"></span><br><span class="line">const host = process.env.TAURI_DEV_HOST;</span><br><span class="line"></span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  // prevent vite from obscuring rust errors</span><br><span class="line">  clearScreen: false,</span><br><span class="line">  server: &#123;</span><br><span class="line">    // make sure this port matches the devUrl port in tauri.conf.json file</span><br><span class="line">    port: 5173,</span><br><span class="line">    // Tauri expects a fixed port, fail if that port is not available</span><br><span class="line">    strictPort: true,</span><br><span class="line">    // if the host Tauri is expecting is set, use it</span><br><span class="line">    host: host || false,</span><br><span class="line">    hmr: host</span><br><span class="line">      ? &#123;</span><br><span class="line">          protocol: &#x27;ws&#x27;,</span><br><span class="line">          host,</span><br><span class="line">          port: 1421,</span><br><span class="line">        &#125;</span><br><span class="line">      : undefined,</span><br><span class="line"></span><br><span class="line">    watch: &#123;</span><br><span class="line">      // tell vite to ignore watching `src-tauri`</span><br><span class="line">      ignored: [&#x27;**/src-tauri/**&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  // Env variables starting with the item of `envPrefix` will be exposed in tauri&#x27;s source code through `import.meta.env`.</span><br><span class="line">  envPrefix: [&#x27;VITE_&#x27;, &#x27;TAURI_ENV_*&#x27;],</span><br><span class="line">  build: &#123;</span><br><span class="line">    // Tauri uses Chromium on Windows and WebKit on macOS and Linux</span><br><span class="line">    target:</span><br><span class="line">      process.env.TAURI_ENV_PLATFORM == &#x27;windows&#x27;</span><br><span class="line">        ? &#x27;chrome105&#x27;</span><br><span class="line">        : &#x27;safari13&#x27;,</span><br><span class="line">    // don&#x27;t minify for debug builds</span><br><span class="line">    minify: !process.env.TAURI_ENV_DEBUG ? &#x27;esbuild&#x27; : false,</span><br><span class="line">    // produce sourcemaps for debug builds</span><br><span class="line">    sourcemap: !!process.env.TAURI_ENV_DEBUG,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="为移动端做准备"><a href="#为移动端做准备" class="headerlink" title="为移动端做准备"></a>为移动端做准备</h1><p>Tauri 的移动端端口要求项目输出一个共享库。<br>如果应用程序面向移动端，则需将 crate 更改为除了桌面可执行文件之外，还生成这种类型的 artifact。</p><ul><li><ol><li>更改 Cargo 清单以生成库。追加以下块</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src-tauri/Cargo.toml</span><br><span class="line">[lib]</span><br><span class="line">name = &quot;app_lib&quot;</span><br><span class="line">crate-type = [&quot;staticlib&quot;, &quot;cdylib&quot;, &quot;rlib&quot;]</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>将 src-tauri&#x2F;src&#x2F;main.rs 重命名为 src-tauri&#x2F;src&#x2F;lib.rs。此文件将由桌面和移动端目标共享。</li></ol></li><li><ol start="3"><li>将 lib.rs 中的 main 函数头重命名为以下内容</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src-tauri/src/lib.rs</span><br><span class="line">#[cfg_attr(mobile, tauri::mobile_entry_point)]</span><br><span class="line">pub fn run() &#123;</span><br><span class="line">    // your code here</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tauri::mobile_entry_point 宏将函数准备好在移动端执行</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>重新创建调用共享运行函数的 main.rs 文件</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src-tauri/src/main.rs</span><br><span class="line">#![cfg_attr(not(debug_assertions), windows_subsystem = &quot;windows&quot;)]</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">  app_lib::run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，hexo</title>
      <link href="/2025/08/22/page2/"/>
      <url>/2025/08/22/page2/</url>
      
        <content type="html"><![CDATA[<h1 id="你好，hexo"><a href="#你好，hexo" class="headerlink" title="你好，hexo"></a>你好，hexo</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="这是我第一次用hexo搭建博客，这是测试的文章"><a href="#这是我第一次用hexo搭建博客，这是测试的文章" class="headerlink" title="这是我第一次用hexo搭建博客，这是测试的文章"></a>这是我第一次用hexo搭建博客，这是测试的文章</h3><h3 id="你好，hexo！"><a href="#你好，hexo！" class="headerlink" title="你好，hexo！"></a>你好，hexo！</h3><hr><p>footer: © 2025-2025 All rights reserved.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
